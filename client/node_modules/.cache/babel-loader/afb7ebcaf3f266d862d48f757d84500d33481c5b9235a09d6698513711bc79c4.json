{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Link,useNavigate}from'react-router-dom';import{Badge}from'react-bootstrap';import api from'../utils/api';import SearchUsers from'./SearchUsers';import Logo from'./Logo';import'./Navbar.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Navbar=()=>{const navigate=useNavigate();const token=localStorage.getItem('token');const[unreadRequests,setUnreadRequests]=useState(0);const[unreadMessages,setUnreadMessages]=useState(0);useEffect(()=>{if(token){fetchUnreadRequests();fetchUnreadMessages();// Set up polling to check for new messages every minute\nconst intervalId=setInterval(()=>{fetchUnreadMessages();fetchUnreadRequests();},60000);// 60 seconds\nreturn()=>clearInterval(intervalId);}},[token]);const fetchUnreadRequests=async()=>{try{const response=await api.get('/api/audio-requests/my-orders');// Get viewed requests from localStorage\nconst storedViewedRequests=localStorage.getItem('viewedRequests');const viewedRequests=storedViewedRequests?new Set(JSON.parse(storedViewedRequests)):new Set();// Count unread pending requests\nconst unreadCount=response.data.filter(req=>!viewedRequests.has(req._id)&&req.status==='pending').length;setUnreadRequests(unreadCount);}catch(err){console.error('Error fetching unread requests:',err);}};const fetchUnreadMessages=async()=>{try{const response=await api.get('/api/messages/unread');setUnreadMessages(response.data.count);}catch(err){console.error('Error fetching unread messages:',err);}};const handleLogout=()=>{localStorage.removeItem('token');localStorage.removeItem('userId');navigate('/login');};return/*#__PURE__*/_jsxs(\"nav\",{className:\"navbar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"navbar-left\",children:/*#__PURE__*/_jsx(Logo,{className:\"navbar-brand\"})}),token&&/*#__PURE__*/_jsx(\"div\",{className:\"navbar-search\",children:/*#__PURE__*/_jsx(SearchUsers,{})}),/*#__PURE__*/_jsxs(\"div\",{className:\"navbar-links\",children:[!token&&/*#__PURE__*/_jsx(Link,{to:\"/login\",children:\"Login\"}),token&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Link,{to:\"/upload\",children:\"Send Audio\"}),/*#__PURE__*/_jsx(Link,{to:\"/audio-history\",children:\"My Audio\"}),/*#__PURE__*/_jsxs(Link,{to:\"/inbox\",className:\"inbox-link\",children:[\"Messages\",unreadMessages>0&&/*#__PURE__*/_jsx(Badge,{pill:true,bg:\"danger\",className:\"unread-badge\",children:unreadMessages})]}),/*#__PURE__*/_jsxs(Link,{to:\"/requests\",className:\"requests-link\",children:[\"Requests\",unreadRequests>0&&/*#__PURE__*/_jsx(Badge,{pill:true,bg:\"danger\",className:\"unread-badge\",children:unreadRequests})]}),/*#__PURE__*/_jsx(Link,{to:\"/profile\",children:\"My Profile\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,className:\"logout-button\",children:\"Logout\"})]})]})]});};export default Navbar;","map":{"version":3,"names":["React","useState","useEffect","Link","useNavigate","Badge","api","SearchUsers","Logo","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Navbar","navigate","token","localStorage","getItem","unreadRequests","setUnreadRequests","unreadMessages","setUnreadMessages","fetchUnreadRequests","fetchUnreadMessages","intervalId","setInterval","clearInterval","response","get","storedViewedRequests","viewedRequests","Set","JSON","parse","unreadCount","data","filter","req","has","_id","status","length","err","console","error","count","handleLogout","removeItem","className","children","to","pill","bg","onClick"],"sources":["/Users/davidmcguire/Desktop/Master/Cursor/AudioZoom/client/src/components/Navbar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Badge } from 'react-bootstrap';\nimport api from '../utils/api';\nimport SearchUsers from './SearchUsers';\nimport Logo from './Logo';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  const navigate = useNavigate();\n  const token = localStorage.getItem('token');\n  const [unreadRequests, setUnreadRequests] = useState(0);\n  const [unreadMessages, setUnreadMessages] = useState(0);\n\n  useEffect(() => {\n    if (token) {\n      fetchUnreadRequests();\n      fetchUnreadMessages();\n\n      // Set up polling to check for new messages every minute\n      const intervalId = setInterval(() => {\n        fetchUnreadMessages();\n        fetchUnreadRequests();\n      }, 60000); // 60 seconds\n\n      return () => clearInterval(intervalId);\n    }\n  }, [token]);\n\n  const fetchUnreadRequests = async () => {\n    try {\n      const response = await api.get('/api/audio-requests/my-orders');\n      \n      // Get viewed requests from localStorage\n      const storedViewedRequests = localStorage.getItem('viewedRequests');\n      const viewedRequests = storedViewedRequests ? new Set(JSON.parse(storedViewedRequests)) : new Set();\n      \n      // Count unread pending requests\n      const unreadCount = response.data.filter(\n        req => !viewedRequests.has(req._id) && req.status === 'pending'\n      ).length;\n      \n      setUnreadRequests(unreadCount);\n    } catch (err) {\n      console.error('Error fetching unread requests:', err);\n    }\n  };\n\n  const fetchUnreadMessages = async () => {\n    try {\n      const response = await api.get('/api/messages/unread');\n      setUnreadMessages(response.data.count);\n    } catch (err) {\n      console.error('Error fetching unread messages:', err);\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    navigate('/login');\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar-left\">\n        <Logo className=\"navbar-brand\" />\n      </div>\n      \n      {token && (\n        <div className=\"navbar-search\">\n          <SearchUsers />\n        </div>\n      )}\n      \n      <div className=\"navbar-links\">\n        {!token && (\n          <Link to=\"/login\">Login</Link>\n        )}\n        {token && (\n          <>\n            <Link to=\"/upload\">Send Audio</Link>\n            <Link to=\"/audio-history\">My Audio</Link>\n            <Link to=\"/inbox\" className=\"inbox-link\">\n              Messages\n              {unreadMessages > 0 && (\n                <Badge pill bg=\"danger\" className=\"unread-badge\">\n                  {unreadMessages}\n                </Badge>\n              )}\n            </Link>\n            <Link to=\"/requests\" className=\"requests-link\">\n              Requests\n              {unreadRequests > 0 && (\n                <Badge pill bg=\"danger\" className=\"unread-badge\">\n                  {unreadRequests}\n                </Badge>\n              )}\n            </Link>\n            <Link to=\"/profile\">My Profile</Link>\n            <button onClick={handleLogout} className=\"logout-button\">Logout</button>\n          </>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,IAAI,CAAEC,WAAW,KAAQ,kBAAkB,CACpD,OAASC,KAAK,KAAQ,iBAAiB,CACvC,MAAO,CAAAC,GAAG,KAAM,cAAc,CAC9B,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,MAAO,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAEtB,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACnB,KAAM,CAAAC,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAa,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGpB,QAAQ,CAAC,CAAC,CAAC,CACvD,KAAM,CAACqB,cAAc,CAAEC,iBAAiB,CAAC,CAAGtB,QAAQ,CAAC,CAAC,CAAC,CAEvDC,SAAS,CAAC,IAAM,CACd,GAAIe,KAAK,CAAE,CACTO,mBAAmB,CAAC,CAAC,CACrBC,mBAAmB,CAAC,CAAC,CAErB;AACA,KAAM,CAAAC,UAAU,CAAGC,WAAW,CAAC,IAAM,CACnCF,mBAAmB,CAAC,CAAC,CACrBD,mBAAmB,CAAC,CAAC,CACvB,CAAC,CAAE,KAAK,CAAC,CAAE;AAEX,MAAO,IAAMI,aAAa,CAACF,UAAU,CAAC,CACxC,CACF,CAAC,CAAE,CAACT,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAO,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACtC,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACwB,GAAG,CAAC,+BAA+B,CAAC,CAE/D;AACA,KAAM,CAAAC,oBAAoB,CAAGb,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CACnE,KAAM,CAAAa,cAAc,CAAGD,oBAAoB,CAAG,GAAI,CAAAE,GAAG,CAACC,IAAI,CAACC,KAAK,CAACJ,oBAAoB,CAAC,CAAC,CAAG,GAAI,CAAAE,GAAG,CAAC,CAAC,CAEnG;AACA,KAAM,CAAAG,WAAW,CAAGP,QAAQ,CAACQ,IAAI,CAACC,MAAM,CACtCC,GAAG,EAAI,CAACP,cAAc,CAACQ,GAAG,CAACD,GAAG,CAACE,GAAG,CAAC,EAAIF,GAAG,CAACG,MAAM,GAAK,SACxD,CAAC,CAACC,MAAM,CAERtB,iBAAiB,CAACe,WAAW,CAAC,CAChC,CAAE,MAAOQ,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAEF,GAAG,CAAC,CACvD,CACF,CAAC,CAED,KAAM,CAAAnB,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACtC,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACwB,GAAG,CAAC,sBAAsB,CAAC,CACtDP,iBAAiB,CAACM,QAAQ,CAACQ,IAAI,CAACU,KAAK,CAAC,CACxC,CAAE,MAAOH,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAEF,GAAG,CAAC,CACvD,CACF,CAAC,CAED,KAAM,CAAAI,YAAY,CAAGA,CAAA,GAAM,CACzB9B,YAAY,CAAC+B,UAAU,CAAC,OAAO,CAAC,CAChC/B,YAAY,CAAC+B,UAAU,CAAC,QAAQ,CAAC,CACjCjC,QAAQ,CAAC,QAAQ,CAAC,CACpB,CAAC,CAED,mBACEJ,KAAA,QAAKsC,SAAS,CAAC,QAAQ,CAAAC,QAAA,eACrBzC,IAAA,QAAKwC,SAAS,CAAC,aAAa,CAAAC,QAAA,cAC1BzC,IAAA,CAACF,IAAI,EAAC0C,SAAS,CAAC,cAAc,CAAE,CAAC,CAC9B,CAAC,CAELjC,KAAK,eACJP,IAAA,QAAKwC,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5BzC,IAAA,CAACH,WAAW,GAAE,CAAC,CACZ,CACN,cAEDK,KAAA,QAAKsC,SAAS,CAAC,cAAc,CAAAC,QAAA,EAC1B,CAAClC,KAAK,eACLP,IAAA,CAACP,IAAI,EAACiD,EAAE,CAAC,QAAQ,CAAAD,QAAA,CAAC,OAAK,CAAM,CAC9B,CACAlC,KAAK,eACJL,KAAA,CAAAE,SAAA,EAAAqC,QAAA,eACEzC,IAAA,CAACP,IAAI,EAACiD,EAAE,CAAC,SAAS,CAAAD,QAAA,CAAC,YAAU,CAAM,CAAC,cACpCzC,IAAA,CAACP,IAAI,EAACiD,EAAE,CAAC,gBAAgB,CAAAD,QAAA,CAAC,UAAQ,CAAM,CAAC,cACzCvC,KAAA,CAACT,IAAI,EAACiD,EAAE,CAAC,QAAQ,CAACF,SAAS,CAAC,YAAY,CAAAC,QAAA,EAAC,UAEvC,CAAC7B,cAAc,CAAG,CAAC,eACjBZ,IAAA,CAACL,KAAK,EAACgD,IAAI,MAACC,EAAE,CAAC,QAAQ,CAACJ,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC7C7B,cAAc,CACV,CACR,EACG,CAAC,cACPV,KAAA,CAACT,IAAI,EAACiD,EAAE,CAAC,WAAW,CAACF,SAAS,CAAC,eAAe,CAAAC,QAAA,EAAC,UAE7C,CAAC/B,cAAc,CAAG,CAAC,eACjBV,IAAA,CAACL,KAAK,EAACgD,IAAI,MAACC,EAAE,CAAC,QAAQ,CAACJ,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC7C/B,cAAc,CACV,CACR,EACG,CAAC,cACPV,IAAA,CAACP,IAAI,EAACiD,EAAE,CAAC,UAAU,CAAAD,QAAA,CAAC,YAAU,CAAM,CAAC,cACrCzC,IAAA,WAAQ6C,OAAO,CAAEP,YAAa,CAACE,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,QAAM,CAAQ,CAAC,EACxE,CACH,EACE,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAApC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}